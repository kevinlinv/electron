version: 2.1

# required for dynamic configuration feature
# setup: true
setup: << pipeline.parameters.run-setup >>

orbs:
  # continuation: circleci/continuation@0.1.2
  path-filtering: circleci/path-filtering@0.0.3

parameters:
  run-setup:
    type: boolean
    default: true

  run-docs-only:
    type: boolean
    default: false

  run-full-build:
    type: boolean
    default: false
  
  upload-to-s3:
    type: string
    default: '1'

  run-lint:
    type: boolean
    default: false
    # default: true

  run-build-linux:
    type: boolean
    default: false
    # default: true

  run-build-mac:
    type: boolean
    default: false
    # default: true

  run-linux-publish:
    type: boolean
    default: false

  linux-publish-arch-limit:
    type: enum
    default: all
    enum: ["all", "arm", "arm64", "x64", "ia32"]

  run-macos-publish:
    type: boolean
    default: false

  macos-publish-arch-limit:
    type: enum
    default: all
    enum: ["all", "osx-x64", "osx-arm64", "mas-x64", "mas-arm64"]

# Executors
executors:
  linux-docker:
    parameters:
      size:
        description: "Docker executor size"
        default: 2xlarge+
        type: enum
        enum: ["medium", "xlarge", "2xlarge+"]
    docker:
      - image: ghcr.io/electron/build:27db4a3e3512bfd2e47f58cea69922da0835f1d9
    resource_class: << parameters.size >>

  macos:
    parameters:
      size:
        description: "macOS executor size"
        default: large
        type: enum
        enum: ["medium", "large"]
    macos:
      xcode: "12.4.0"
    resource_class: << parameters.size >>

  # Electron Runners
  apple-silicon:
    resource_class: electronjs/macos-arm64
    machine: true

  linux-arm:
    resource_class: electronjs/linux-arm
    machine: true

  linux-arm64:
    resource_class: electronjs/linux-arm64
    machine: true

# The config expects the following environment variables to be set:
#  - "SLACK_WEBHOOK" Slack hook URL to send notifications.
#
# The publishing scripts expect access tokens to be defined as env vars,
# but those are not covered here.
#
# CircleCI docs on variables:
# https://circleci.com/docs/2.0/env-vars/

# Build configurations options.
env-testing-build: &env-testing-build
  GN_CONFIG: //electron/build/args/testing.gn
  CHECK_DIST_MANIFEST: '1'

env-release-build: &env-release-build
  GN_CONFIG: //electron/build/args/release.gn
  STRIP_BINARIES: true
  GENERATE_SYMBOLS: true
  CHECK_DIST_MANIFEST: '1'
  IS_RELEASE: true

env-headless-testing: &env-headless-testing
  DISPLAY: ':99.0'

env-stack-dumping: &env-stack-dumping
  ELECTRON_ENABLE_STACK_DUMPING: '1'

env-browsertests: &env-browsertests
  GN_CONFIG: //electron/build/args/native_tests.gn
  BUILD_TARGET: electron/spec:chromium_browsertests
  TESTS_CONFIG: src/electron/spec/configs/browsertests.yml

env-unittests: &env-unittests
  GN_CONFIG: //electron/build/args/native_tests.gn
  BUILD_TARGET: electron/spec:chromium_unittests
  TESTS_CONFIG: src/electron/spec/configs/unittests.yml

# Build targets options.
env-ia32: &env-ia32
  GN_EXTRA_ARGS: 'target_cpu = "x86"'
  NPM_CONFIG_ARCH: ia32
  TARGET_ARCH: ia32

env-arm: &env-arm
  GN_EXTRA_ARGS: 'target_cpu = "arm"'
  MKSNAPSHOT_TOOLCHAIN: //build/toolchain/linux:clang_arm
  BUILD_NATIVE_MKSNAPSHOT: 1
  TARGET_ARCH: arm

env-apple-silicon: &env-apple-silicon
  GN_EXTRA_ARGS: 'target_cpu = "arm64" use_prebuilt_v8_context_snapshot = true'
  TARGET_ARCH: arm64
  USE_PREBUILT_V8_CONTEXT_SNAPSHOT: 1
  npm_config_arch: arm64

env-arm64: &env-arm64
  GN_EXTRA_ARGS: 'target_cpu = "arm64" fatal_linker_warnings = false enable_linux_installer = false'
  MKSNAPSHOT_TOOLCHAIN: //build/toolchain/linux:clang_arm64
  BUILD_NATIVE_MKSNAPSHOT: 1
  TARGET_ARCH: arm64

env-mas: &env-mas
  GN_EXTRA_ARGS: 'is_mas_build = true'
  MAS_BUILD: 'true'

env-mas-apple-silicon: &env-mas-apple-silicon
  GN_EXTRA_ARGS: 'target_cpu = "arm64" is_mas_build = true use_prebuilt_v8_context_snapshot = true'
  MAS_BUILD: 'true'
  TARGET_ARCH: arm64
  USE_PREBUILT_V8_CONTEXT_SNAPSHOT: 1

env-send-slack-notifications: &env-send-slack-notifications
  NOTIFY_SLACK: true
  
env-global: &env-global
  ELECTRON_OUT_DIR: Default

env-linux-medium: &env-linux-medium
  <<: *env-global
  NUMBER_OF_NINJA_PROCESSES: 3

env-linux-2xlarge: &env-linux-2xlarge
  <<: *env-global
  NUMBER_OF_NINJA_PROCESSES: 34

env-linux-2xlarge-release: &env-linux-2xlarge-release
  <<: *env-global
  NUMBER_OF_NINJA_PROCESSES: 16

env-machine-mac: &env-machine-mac
  <<: *env-global
  NUMBER_OF_NINJA_PROCESSES: 6

env-mac-large: &env-mac-large
  <<: *env-global
  NUMBER_OF_NINJA_PROCESSES: 18

env-mac-large-release: &env-mac-large-release
  <<: *env-global
  NUMBER_OF_NINJA_PROCESSES: 8

env-ninja-status: &env-ninja-status
  NINJA_STATUS: "[%r processes, %f/%t @ %o/s : %es] "

env-disable-run-as-node: &env-disable-run-as-node
  GN_BUILDFLAG_ARGS: 'enable_run_as_node = false'

env-32bit-release: &env-32bit-release
  # Set symbol level to 1 for 32 bit releases because of https://crbug.com/648948
  GN_BUILDFLAG_ARGS: 'symbol_level = 1'

env-macos-build: &env-macos-build
  # Disable pre-compiled headers to reduce out size, only useful for rebuilds
  GN_BUILDFLAG_ARGS: 'enable_precompiled_headers = false'

# TODO: Re-add individual (shared) steps.
# TODO: Re-add commands
# TODO: Re-add all jobs
# TODO: Re-add all workflows

# List of all steps
step-checkout-electron: &step-checkout-electron
  checkout:
    path: src/electron

step-checkout-doc-only-change: &step-checkout-doc-only-change
  run:
    name: Check if commit is doc only change
    command: |
      cd src/electron
      node script/yarn install --frozen-lockfile

step-ts-compile: &step-ts-compile
  run:
    name: Run TS/JS compile on doc only change
    command: |
      cd src
      ninja -C out/Default electron:default_app_js -j $NUMBER_OF_NINJA_PROCESSES
      ninja -C out/Default electron:electron_js2c -j $NUMBER_OF_NINJA_PROCESSES

# List of all jobs.
jobs:
  electron-checkout:
    executor:
      name: linux-docker
      size: medium
    steps:
      - *step-checkout-electron

  docs-only:
    executor:
      name: linux-docker
      size: medium
    steps:
      - *step-checkout-electron
      - *step-checkout-doc-only-change
      - run: "echo 'Running only a docs change'"

  full-build:
    executor:
      name: linux-docker
      size: medium
    steps:
      - run: "echo 'Running a full Electron build.'"

workflows:
  setup:
    when: << pipeline.parameters.run-setup >>
    jobs:
      - path-filtering/filter:
          # Compare files on all branches, using the webhook payload from Github
          base-revision: << pipeline.git.branch >>
          config-path: .circleci/config.yml
          # Params for mapping; `path-to-test parameter-to-set value-for-parameter` for each row
          mapping: |
            .* run-setup false
            .* run-lint true
            ^((?!docs/).)*$ run-full-build true
            docs/.* run-docs-only true
  docs-only:
    when: << pipeline.parameters.run-docs-only >>
    jobs:
      - docs-only
  full-build:
    when: << pipeline.parameters.run-full-build >>
    jobs:
      - full-build
